# =============================================================================
# Analysis Service Helm Chart Values (Spring Boot)
# =============================================================================

# =============================================================================
# 이미지 설정
# =============================================================================
image:
  repository: octacloud/analysis-service
  tag: "abca86085898ef940d9f7fe04bc6b3beb545aaee-18626747616"
  pullPolicy: IfNotPresent

# =============================================================================
# 서비스 설정
# =============================================================================
service:
  type: ClusterIP
  port: 8080
  targetPort: 8080

# =============================================================================
# 배포 설정
# =============================================================================
replicaCount: 2

# =============================================================================
# 리소스 설정
# =============================================================================
resources:
  limits:
    cpu: 1000m
    memory: 2Gi
  requests:
    cpu: 200m
    memory: 512Mi

# =============================================================================
# 헬스 체크 설정
# =============================================================================
livenessProbe:
  httpGet:
    path: /actuator/health/liveness
    port: 8080
  initialDelaySeconds: 120
  periodSeconds: 30
  failureThreshold: 5
  timeoutSeconds: 10

readinessProbe:
  httpGet:
    path: /actuator/health/readiness
    port: 8080
  initialDelaySeconds: 60
  periodSeconds: 10
  failureThreshold: 3
  timeoutSeconds: 5

# =============================================================================
# 환경 변수 설정
# =============================================================================
env:
  # Spring Boot 기본 설정
  SPRING_PROFILES_ACTIVE: "prod"
  SERVER_PORT: "8080"

  # 데이터베이스 설정
  RDB_USERNAME: "monguser"
  RDB_PASSWORD: "mongpassword123"
  RDB_URL: "jdbc:mysql://34.22.107.76:3306/mong-analysis?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC"

  # Redis 설정
  SPRING_REDIS_HOST: "10.226.34.155"
  SPRING_REDIS_PORT: "6379"

  # JWT 설정
  JWT_KEY: ""
  JWT_ACCESS_SUBJECT: "AccessToken"
  JWT_TOKEN_HEADER: "Authorization"
  JWT_BEARER: "Bearer"
  JWT_ID: "id"

  # Kafka 설정
  KAFKA_ENABLED: "true"
  KAFKA_BROKERS: "pkc-gq2xn.asia-northeast3.gcp.confluent.cloud:9092"
  KAFKA_SECURITY_PROTOCOL: "SASL_SSL"
  KAFKA_SASL_MECHANISM: "PLAIN"
  KAFKA_SASL_USERNAME: ""
  KAFKA_SASL_PASSWORD: ""

  # 파일 업로드 설정
  SPRING_SERVLET_MULTIPART_MAX_FILE_SIZE: "50MB"
  SPRING_SERVLET_MULTIPART_MAX_REQUEST_SIZE: "50MB"

  # 로깅 설정
  LOGGING_LEVEL_ROOT: "INFO"
  LOGGING_LEVEL_COM_PROJECT_ANALYSIS: "DEBUG"

# =============================================================================
# 서비스 계정 설정
# =============================================================================
serviceAccount:
  create: true
  name: ""

# =============================================================================
# ConfigMap 설정
# =============================================================================
configMap:
  create: true
  name: ""

# =============================================================================
# Secret 설정
# =============================================================================
secrets:
  create: true
  name: ""
  # 민감정보는 Sealed Secrets로 관리합니다. (빈 값 유지)
  JWT_KEY: ""
  RDB_PASSWORD: ""
  KAFKA_SASL_USERNAME: ""
  KAFKA_SASL_PASSWORD: ""
sealedSecrets:
  enabled: true
  encryptedData:
    # 다음 키에 kubeseal로 암호화한 값을 세팅하세요 (현재 클러스터의 공개키 사용)
    JWT_KEY: "AgB5fPQK8btXAGFINhSd3BgCwBjBZABWnnkdjb532PiAJGruUVjufLSJNfaIiaEZt6ljfF1EG87826VsAzM/qybbKYUvCTdjTpecIGXKJ9EAVGFOBkuw4S4xpILqShRrjDrrVrIfdTuWkm7xa489dcXwn4NCT7SRfHFEu3DODa+b1ZSRSkhjXK6t+vXmTmQdxC7WtauJvQq5KjFBAqg15tp0Bf66FzqOKbPWCInA5pgdtoKIzbNIJTyIapRgDLb6liA6+Fvu3sBY2qPk+vIlhZQQ6jNu6KUI7oRa6h8lj+rhsxeBAA983qJ0u/DFs7KgyxkdFxnU6bV43Ax+jQzzhxjhS0NXlYDMhYzTJrEeyAo69U4f0kfIXXmJInT5u7lS1rS4owRhhnQQQ+fQKtptEBJ+xnLEFv76TWtVaOnkPJPwTH87WyQmOrx3mVXG7Sn2fUBk5M1wokhAU2equxYaBOYmYbMD2msUCzUACn5Kkk1t/NPQvCbkoGkeVYdptcm/TPKjdHlV4BP6DAdJmEfCQvLu4lX5IV6xPE86LeulDJ+tswplHwN4qwXZcCv+LbWZ1qVTUliIE527ZjWkL4VURpTD6lbRzhPCF5f7eJmXE7LXuUBE9O4n7elkZ0T4bn5ePXKc2LaCSeQhO5lLrqHIn049oVWU06pG4vze/9VUrG79uwiaZI0nHC8IjGWJr6ev1yofpWEYuTz+Dg7zJ5PnqvDcgXTXuoOeMkci54CqDZIveOStcC0XZqaKIjRvTSWKIgQvPWyaq2r7/8Pe1vSpxQDK5oTiAJI4/F4PU2DnjugZJLZ392AKWzZG"
    RDB_PASSWORD: "AgDaJtNsEA2u+iihn6lCAbo4hoVtgC/DoBYfMjZPSlp5JcK559V8UH+h5rf7jg3DsxWFS9qebbnZs85gnZz/2zImNJTBXrLRzyEx4u7sUkSt/pjcRK034aCBGrrjTXUYjs1Sc8PucY8l1Fbxu/+8Bv78vEVelF7B2zHgrVlSgr9z08dgGj+tQ2uKqBymT9uJO6SgWSNodTeuXpNV0T3iZNIeOBUfs08RyzIwiTMKQfuIlb1F/w3jf5UryI4FrbRhsxC48ZA/P6oEmZBxSaj5z/nAyt2QgpV9eGszfkCxsDBNNA8WEbb8YCnVVTZwiHR/jS2Nffc1cemyEC3myeJD5vXCZhhUxykFeNfztGOylSHVx+3WJ8vs1aZV2IIkcwpYddT/RxIe5YyrZeaRQK2dctocihyj4n2bwRzx/16lcukgjYVgfNazOqQusCT63fuSDv6H1lxuvsEilDxj+hoHmLUiEF26TJBZ25tpwq3yJviTt4TjiRsDSrlpN70i6t74/4MyOI+o+03ntUINtvL1BswjY+7xUaISSAfICii/vb84iGOCk23HxnphiL49mrGT3djK1W7ttr3CjbQ1WZ8fFZCvXQa02EZIzNFyS2cGsS7hj8DWwPkmjA0yzvjAG79iQoaUc/H+4ORwgNGI8H9lkGRESM7WvaO7JRruRp6IPvnE79mSqHBRmlPKyaus4KcXyjZEUChpFa47FoDJW9Rt6yRW8a+Lw6aD8F5YuJ9uGHMTMkTPvpt7WxwfMpwtTWlRY/fez2djapX4O6EzS++uLM00"
    KAFKA_SASL_USERNAME: "AgBLojjq3Is1zTiuWsY0C7RP1CJ0IRDv6tI7LGwcw9p65ZPzLK/bDjTaBifyBHwtg3wOIFH40xgSi3ykmTpoR72CSaux58psSiwN4ZDYonRezgyvk1iJuBCn3R0LNouJFB/FzAVnd9865RZN4UItbBsL93NpCMQClumTZN6hV70+BT1SJ5cj9WIHCQCedPbUJN369ZSLPv45zFDfRf/fIpyzMnewhWGREHy9e+cm4uOhTlAXe9LAiwYloYrLXdYu30q1sch6d3cM1fhAPL6OJg5qfBjpmGDJGrUe2YOSOrERdL/W7DHp6aE+iljwELiMmtohdQvQKJq0yCrG/4NNqCsU+z92JRfqRyPObIWWOHhxC16JgRwRFq+I+Tl3CFBmCFX4nt7JYyTE4lb+TUsEQhnxLCMhUfPOxfY+b3CrUZFYbaHZFrGT7U/2UJlad6aj8JI7tAj2FauoMcwbTvEoEqlU65U5DlUZWZ5W+YhPgYhTnuUjMl06KBHq+b9DhXDUA5+NTGWC40w3546FzG2Be6B6u8ggvwlKs0R+7AUrutzySB9VuJ9tFQImADY6GrUufRLkzEEvX0JBfTWNIbUc7Nm6fXm2KOOtLYrjsoO/qCWc1zTLLGfEZ/J4ULMzQoUmGhulYPE/+bxST4lJeo+FRb67YFA9I8kViDVXrHeDkAJvMsXiWsPxiKmYtVqYrAws0sshUD7Ce5hPeNTe1Cmg6JoQ"
    KAFKA_SASL_PASSWORD: "AgA3ibAuxDod+pQl1HQ8VpcgCmeXEwLbA/u0G03g3eOeBoEiPS8ppyVSrIUkVSWK8fj8FhHQU+puYIElNdDHxoKhVt0ZTAlSAU9GgAOGuJm9A1ALFJk46mJjY/ZHUbH/VRuQUm9tERqOzf77TvW1JYSu475Bk6Z6foo2CfW7NFJCHQF67boEgm/foyIkGko809kKWpnk3E7awTfTCUoKFqfJcCFLcfrVsBBgUUSxcCGuYAPj+wspya2rs77ZIo2TH4NCfRlxmD+jfk9PjIOsqcJnWti4LWp6lXMaGR0Je7Ks7yiuP9yPn3jx0ph/7pmZvEvKCIprqGWQYPWva+8chSKcguj5iNxt0q8meVzS6tH6KefutkPVLs2FPxd9BUJWa/y1sA84//Y9eoMnpE4aN1FVoMn/e3zO38FKuv10kXaErhI3D0h+X0kombLCsMC1flFuFKyHDsczB9pgMWmzw+zCYkbQy09cU15u7S0eWKxoBI6Yw/fKk9RhDhPtp2GWvl+OV1Z/wagDhmBTuA4HkDGQ1TEcYhT3FmLxOLiCAmENeWuXv5doHONPbEkmZwRrieOG3GoDb9UWs56uYf/EWU2p9Zq1QNbbPOwRiwO5wlfW4SgvrbXHceWnRPzQT04H99AZFTnpVifWu+JuSdCqwk72mXCDYQZz3a35oUXk7On3+I1FdlBHAERkVGKDDGa9fAD7gz+hMW2KPrBhGyQnc5fYFDeODVBykx1xQ9u7hvVcpCENjCLyCiKPbVAy1wl1k4/+v7CdLz6hLRc84MWxodLi"
# =============================================================================
# Ingress 설정
# =============================================================================
ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt"
    nginx.ingress.kubernetes.io/auth-url: "http://auth-service.microservices-dev.svc.cluster.local:8080/api/auth/internal"
    nginx.ingress.kubernetes.io/auth-method: "POST"
    nginx.ingress.kubernetes.io/auth-request-headers: "Authorization"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "http://localhost:5173, https://www.mong.live, http://www.mong.live"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS, PATCH, HEAD"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Authorization, Content-Type, X-Requested-With, Accept, Origin, Access-Control-Request-Method, Access-Control-Request-Headers, X-User-Id, Cache-Control, Pragma"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-max-age: "3600"
    nginx.ingress.kubernetes.io/auth-snippet: |
      # OPTIONS 요청은 CORS preflight이므로 인증 제외하고 CORS 헤더 추가
      if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '$http_origin' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH, HEAD' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With, Accept, Origin, Access-Control-Request-Method, Access-Control-Request-Headers, X-User-Id, Cache-Control, Pragma' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Max-Age' '3600' always;
        add_header 'Content-Length' 0;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        return 204;
      }
  hosts:
    - host: "api.mong.live"
      paths:
        - path: /api/analysis
          pathType: Prefix
  tls:
    - secretName: api-mong-live-tls
      hosts:
        - "api.mong.live"

# =============================================================================
# 노드 선택자
# =============================================================================
nodeSelector: {}

# =============================================================================
# 톨러레이션
# =============================================================================
tolerations: []

# =============================================================================
# 어피니티
# =============================================================================
affinity: {}

# =============================================================================
# Cloud SQL Proxy 설정
# =============================================================================
cloudSqlProxy:
  enabled: true
  image: gcr.io/cloudsql-docker/gce-proxy:latest
  port: 3306
  instance: mong-develop:asia-northeast3:mong-mysql

# =============================================================================
# 추가 설정
# =============================================================================
podAnnotations: {}
podSecurityContext: {}
securityContext: {}
imagePullSecrets: []

# =============================================================================
# HPA (Horizontal Pod Autoscaler) 설정
# =============================================================================
autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# =============================================================================
# 라이프사이클 훅
# =============================================================================
lifecycle: {}
