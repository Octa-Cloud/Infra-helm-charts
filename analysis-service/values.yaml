# =============================================================================
# Analysis Service Helm Chart Values (Spring Boot)
# =============================================================================

# =============================================================================
# 이미지 설정
# =============================================================================
image:
  repository: octacloud/analysis-service
  tag: "4214e07e8885b7b9cf8c8b96a6db112637e6cba0-18625401037"
  pullPolicy: IfNotPresent

# =============================================================================
# 서비스 설정
# =============================================================================
service:
  type: ClusterIP
  port: 8080
  targetPort: 8080

# =============================================================================
# 배포 설정
# =============================================================================
replicaCount: 2

# =============================================================================
# 리소스 설정
# =============================================================================
resources:
  limits:
    cpu: 1000m
    memory: 2Gi
  requests:
    cpu: 200m
    memory: 512Mi

# =============================================================================
# 헬스 체크 설정
# =============================================================================
livenessProbe:
  httpGet:
    path: /health
    port: 8080
  initialDelaySeconds: 120
  periodSeconds: 30
  failureThreshold: 5
  timeoutSeconds: 10

readinessProbe:
  httpGet:
    path: /actuator/health/readiness
    port: 8080
  initialDelaySeconds: 60
  periodSeconds: 10
  failureThreshold: 3
  timeoutSeconds: 5

# =============================================================================
# 환경 변수 설정
# =============================================================================
env:
  # Spring Boot 기본 설정
  SPRING_PROFILES_ACTIVE: "prod"
  SERVER_PORT: "8080"

  # 데이터베이스 설정
  RDB_USERNAME: "monguser"
  RDB_PASSWORD: "mongpassword123"
  RDB_URL: "jdbc:mysql://34.22.107.76:3306/mong-analysis?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC"

  # Redis 설정
  SPRING_REDIS_HOST: "10.226.34.155"
  SPRING_REDIS_PORT: "6379"

  # JWT 설정
  JWT_SECRET: "your-jwt-secret-key"
  JWT_ALGORITHM: "HS256"
  JWT_ACCESS_SUBJECT: "AccessToken"
  JWT_REFRESH_SUBJECT: "RefreshToken"
  JWT_TOKEN_HEADER: "Authorization"
  JWT_BEARER_PREFIX: "Bearer"
  JWT_ID_CLAIM: "id"

  # Kafka 설정
  KAFKA_ENABLED: "true"
  KAFKA_BROKERS: "pkc-gq2xn.asia-northeast3.gcp.confluent.cloud:9092"
  KAFKA_SECURITY_PROTOCOL: "SASL_SSL"
  KAFKA_SASL_MECHANISM: "PLAIN"
  KAFKA_SASL_USERNAME: "AGQDVMNB6DVPXFX7"
  KAFKA_SASL_PASSWORD: "cfltBaumbQnzwuPIRS3E8S1MNrfqrsb9LXzDvUBPBrP0YQRUTfBqdD2nOKmzUXFw"

  # 파일 업로드 설정
  SPRING_SERVLET_MULTIPART_MAX_FILE_SIZE: "50MB"
  SPRING_SERVLET_MULTIPART_MAX_REQUEST_SIZE: "50MB"

  # 로깅 설정
  LOGGING_LEVEL_ROOT: "INFO"
  LOGGING_LEVEL_COM_PROJECT_ANALYSIS: "DEBUG"

# =============================================================================
# 서비스 계정 설정
# =============================================================================
serviceAccount:
  create: true
  name: ""

# =============================================================================
# ConfigMap 설정
# =============================================================================
configMap:
  create: true
  name: ""

# =============================================================================
# Secret 설정
# =============================================================================
secrets:
  create: true
  name: ""
  # 민감정보는 Sealed Secrets로 관리합니다. (빈 값 유지)
  JWT_SECRET: ""
  RDB_PASSWORD: ""
  KAFKA_SASL_USERNAME: ""
  KAFKA_SASL_PASSWORD: ""

sealedSecrets:
  enabled: true
  encryptedData:
    # 다음 키에 kubeseal로 암호화한 값을 세팅하세요 (현재 클러스터의 공개키 사용)
    JWT_SECRET: "AgBcOz5Ao1RsuIah4UHqJXH4vSWYp237RgqUaG5hid/nHK2QCUNInwtwlagg/wn+UhocGAwlWcQb0OAINKtl5x1cZjma8QyRlMz2XKn0YOnHSnFxo1ruE0q7f/VVsvcJ2YEtnUrybNUT7zX3y0fwnbuwcvNtu4LkQWIAy+RdtHu14MHhKaskkvSo1D76j3XgzZdswA1merM2u84QFP0WCTq4HvckDzdH4Dpja8oo5jqBi/VcEXLJZJ9eo4ntY5Ff6f6Qf21Mzn+p8IBzeT8fyetCnyORayRh+HaRo1w7qhHOBOCY4HNcxiwWHscnmJRvD5kB8DShFcpAI752U4dnbceCvXNR51LtrMXPlaueDqZm2Znrk19yLgrPmrKqob3T3Z6R1qqd7jFVTq/ScoKKk9+VW1RPg6LiJNzxhsBDCXYX1YQpaaiSLWmNjFg0yw8muWTXOrDgbZKpdP3UaRqKZed8Y6iL2OLlUUaY1nHVZD05ArzfIAkakM5KjXeAzDhcd2jQ44uXcAu6YFN1AsHG2EfwTusAeQ81Q8CqOECMnSXlD7BTKyIm5ExRytVM1RhjjQ3AiWHHoRtOVsZvFdW9HDykZWV1EnhTwGjlUmTKjo9AjRVpp2krfV79Y0cHv3PdmXaGPNfHGB776dBItH2WMSE0u77nnDPEkkjzi4SyuCNFzX3/eidK4Drz6XzxUsKZVOJNtknbrOJArwoVfqG7Nl8xfI/iWnO3SsTDGfPJfIjmjlIOZX6zRVYgnlz6jEC4GElZJIVzHfmyDKLgvmw+DzowYZ2bx/jiPvHt/edVunw5gEODuLxlmi/lXQ=="
    RDB_PASSWORD: "AgDaJtNsEA2u+iihn6lCAbo4hoVtgC/DoBYfMjZPSlp5JcK559V8UH+h5rf7jg3DsxWFS9qebbnZs85gnZz/2zImNJTBXrLRzyEx4u7sUkSt/pjcRK034aCBGrrjTXUYjs1Sc8PucY8l1Fbxu/+8Bv78vEVelF7B2zHgrVlSgr9z08dgGj+tQ2uKqBymT9uJO6SgWSNodTeuXpNV0T3iZNIeOBUfs08RyzIwiTMKQfuIlb1F/w3jf5UryI4FrbRhsxC48ZA/P6oEmZBxSaj5z/nAyt2QgpV9eGszfkCxsDBNNA8WEbb8YCnVVTZwiHR/jS2Nffc1cemyEC3myeJD5vXCZhhUxykFeNfztGOylSHVx+3WJ8vs1aZV2IIkcwpYddT/RxIe5YyrZeaRQK2dctocihyj4n2bwRzx/16lcukgjYVgfNazOqQusCT63fuSDv6H1lxuvsEilDxj+hoHmLUiEF26TJBZ25tpwq3yJviTt4TjiRsDSrlpN70i6t74/4MyOI+o+03ntUINtvL1BswjY+7xUaISSAfICii/vb84iGOCk23HxnphiL49mrGT3djK1W7ttr3CjbQ1WZ8fFZCvXQa02EZIzNFyS2cGsS7hj8DWwPkmjA0yzvjAG79iQoaUc/H+4ORwgNGI8H9lkGRESM7WvaO7JRruRp6IPvnE79mSqHBRmlPKyaus4KcXyjZEUChpFa47FoDJW9Rt6yRW8a+Lw6aD8F5YuJ9uGHMTMkTPvpt7WxwfMpwtTWlRY/fez2djapX4O6EzS++uLM00"
    KAFKA_SASL_USERNAME: "AgDoGHSgf0khZ3cQgPCDHPxAJoc+CE5O0NxVZ/sNT8mcUpX3ShE/ZeL93ptKtdGwWJrNt/+8wLreziBMFGh/sA+9omvf2c3j1gx3rCB6bnlpQv7vXkc35LTcjom+4RENEVX8ELlqIm4AVFIKJ+JSLj7co2IWtbqGjwqjT5CDGeLh2PMuGe30PcppD6hKP/3tGsHCWxM5SEeQkYPb2LBrU82q6yoDeV/N28rSDRcwJRfeOcuR80Wrt+roeG8Nf5TOFiqkGl46aVV1KLRMRFQgP4a5DoAFVYPpJ63nwKfVrdZLgHtCfSoX4LCt0W8DltQwYklVnUpe4PkGBEZR5gFwDbTI09eY1bh05/3zcn8KuRtWF+922RGOodkzxpLlrBB4qJP3ud4QIsr+0d56rQm0+MT+uW4a1a8X0uSTuFF48ITDSu7Ess04XtqooYAhEHfo7F7x2mhe0MogD8o6WvP9eDaRF1FQwKhjnCajs+IlrVaLPNUrdy+/V1vmB5ewtL2u20pEsTsEBdE9BVXAI97VHHtSa5lacdDicnBajHz7UmUoNwdSyQOO7qiuyTLMuRfHzx8eNePg22RGfwdlZAZfzRZYOtBgGU9ONU4VITop00FbDPlO8E6xdpJGw9Sjj4dMfrZY/bGaAGE/gL67onCp/mw84IuUIdQYxzS6nhkDpI7IvvwOuFo9RQNiIy3bIIDctqHvEVxoV4SX+tPRNj2yfHht"
    KAFKA_SASL_PASSWORD: "AgDaJtNsEA2u+iihn6lCAbo4hoVtgC/DoBYfMjZPSlp5JcK559V8UH+h5rf7jg3DsxWFS9qebbnZs85gnZz/2zImNJTBXrLRzyEx4u7sUkSt/pjcRK034aCBGrrjTXUYjs1Sc8PucY8l1Fbxu/+8Bv78vEVelF7B2zHgrVlSgr9z08dgGj+tQ2uKqBymT9uJO6SgWSNodTeuXpNV0T3iZNIeOBUfs08RyzIwiTMKQfuIlb1F/w3jf5UryI4FrbRhsxC48ZA/P6oEmZBxSaj5z/nAyt2QgpV9eGszfkCxsDBNNA8WEbb8YCnVVTZwiHR/jS2Nffc1cemyEC3myeJD5vXCZhhUxykFeNfztGOylSHVx+3WJ8vs1aZV2IIkcwpYddT/RxIe5YyrZeaRQK2dctocihyj4n2bwRzx/16lcukgjYVgfNazOqQusCT63fuSDv6H1lxuvsEilDxj+hoHmLUiEF26TJBZ25tpwq3yJviTt4TjiRsDSrlpN70i6t74/4MyOI+o+03ntUINtvL1BswjY+7xUaISSAfICii/vb84iGOCk23HxnphiL49mrGT3djK1W7ttr3CjbQ1WZ8fFZCvXQa02EZIzNFyS2cGsS7hj8DWwPkmjA0yzvjAG79iQoaUc/H+4ORwgNGI8H9lkGRESM7WvaO7JRruRp6IPvnE79mSqHBRmlPKyaus4KcXyjZEUChpFa47FoDJW9Rt6yRW8a+Lw6aD8F5YuJ9uGHMTMkTPvpt7WxwfMpwtTWlRY/fez2djapX4O6EzS++uLM00"

# =============================================================================
# Ingress 설정
# =============================================================================
ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt"
    nginx.ingress.kubernetes.io/auth-url: "http://auth-service.microservices-dev.svc.cluster.local:8080/api/auth/internal"
    nginx.ingress.kubernetes.io/auth-method: "POST"
    nginx.ingress.kubernetes.io/auth-request-headers: "Authorization"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "http://localhost:5173, https://www.mong.live, http://www.mong.live"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS, PATCH, HEAD"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Authorization, Content-Type, X-Requested-With, Accept, Origin, Access-Control-Request-Method, Access-Control-Request-Headers, X-User-Id, Cache-Control, Pragma"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-max-age: "3600"
    nginx.ingress.kubernetes.io/auth-snippet: |
      # OPTIONS 요청은 CORS preflight이므로 인증 제외하고 CORS 헤더 추가
      if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '$http_origin' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH, HEAD' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With, Accept, Origin, Access-Control-Request-Method, Access-Control-Request-Headers, X-User-Id, Cache-Control, Pragma' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Max-Age' '3600' always;
        add_header 'Content-Length' 0;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        return 204;
      }
  hosts:
    - host: "api.mong.live"
      paths:
        - path: /api/analysis
          pathType: Prefix
  tls:
    - secretName: api-mong-live-tls
      hosts:
        - "api.mong.live"

# =============================================================================
# 노드 선택자
# =============================================================================
nodeSelector: {}

# =============================================================================
# 톨러레이션
# =============================================================================
tolerations: []

# =============================================================================
# 어피니티
# =============================================================================
affinity: {}

# =============================================================================
# Cloud SQL Proxy 설정
# =============================================================================
cloudSqlProxy:
  enabled: true
  image: gcr.io/cloudsql-docker/gce-proxy:latest
  port: 3306
  instance: mong-develop:asia-northeast3:mong-mysql

# =============================================================================
# 추가 설정
# =============================================================================
podAnnotations: {}
podSecurityContext: {}
securityContext: {}
imagePullSecrets: []

# =============================================================================
# HPA (Horizontal Pod Autoscaler) 설정
# =============================================================================
autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# =============================================================================
# 라이프사이클 훅
# =============================================================================
lifecycle: {}
