# =============================================================================
# Analysis Service Helm Chart Values
# =============================================================================

# =============================================================================
# 이미지 설정
# =============================================================================
image:
  repository: octacloud/analysis-service
  tag: "e9c51d2656e7a91381a63205f31447a2dc364df3-18524744265"
  pullPolicy: IfNotPresent
# =============================================================================
# 서비스 설정
# =============================================================================
service:
  type: ClusterIP
  port: 8080
  targetPort: 8080
# =============================================================================
# 배포 설정
# =============================================================================
replicaCount: 3
# =============================================================================
# 리소스 설정
# =============================================================================
resources:
  limits:
    cpu: 500m
    memory: 1Gi
  requests:
    cpu: 200m
    memory: 512Mi
# =============================================================================
# 헬스 체크 설정
# =============================================================================
livenessProbe:
  httpGet:
    path: /health
    port: 8080
  initialDelaySeconds: 60
  periodSeconds: 30
  failureThreshold: 5
  timeoutSeconds: 10
readinessProbe:
  httpGet:
    path: /health
    port: 8080
  initialDelaySeconds: 60
  periodSeconds: 30
  failureThreshold: 5
  timeoutSeconds: 10
# =============================================================================
# 환경 변수 설정
# =============================================================================
env:
  # 기존 환경변수들 (유지)
  REDIS_HOST: "10.226.34.155"
  REDIS_PORT: "6379"
  PYTHONUNBUFFERED: "1"
  MONGODB_URI: "mongodb://mongodb.microservices-dev.svc.cluster.local:27017/mong"
  DATABASE_URL: "mysql+pymysql://monguser:mongpassword123@localhost:3306/mong-analysis?charset=utf8mb4"
  DB_USER: "monguser"
  DB_PASSWORD: "mongpassword123"
  DB_HOST: "127.0.0.1"
  DB_PORT: "3306"
  DB_NAME: "mong-analysis"
  KAFKA_ENABLED: "true"
  KAFKA_BROKERS: "pkc-gq2xn.asia-northeast3.gcp.confluent.cloud:9092"
  KAFKA_SECURITY_PROTOCOL: "SASL_SSL"
  KAFKA_SASL_MECHANISM: "PLAIN"
  KAFKA_SESSION_TIMEOUT_MS: "45000"
  KAFKA_PROTOBUF_ENABLED: "true"
  TOPIC_BRAINWAVE_INPUT_RAW: "brainwave.input.raw"
  TOPIC_BRAINWAVE_SPLIT_EPOCHS: "brainwave.split.epochs"
  TOPIC_BRAINWAVE_ANALYZED_EPOCH: "brainwave.analyzed.epoch"
  TOPIC_BRAINWAVE_PERSIST_REQUESTS: "brainwave.persist.requests"
  TOPIC_DLQ: "brainwave.dlq"
  GROUP_BRAINWAVE_SPLITTER: "brainwave-splitter"
  GROUP_BRAINWAVE_ANALYZER: "brainwave-analyzer"
  GROUP_BRAINWAVE_AGGREGATOR: "brainwave-aggregator"
  GROUP_BRAINWAVE_DB_WRITER: "brainwave-db-writer"
  # 새로 추가된 환경변수들 (음성 분석 기능)
  # Logging
  LOG_LEVEL: "INFO"
  LOG_PROFILE: "text"
  # Sound worker defaults
  YAMNET_SAMPLE_RATE: "16000"
  YAMNET_CONFIDENCE: "0.87"
  YAMNET_MODEL_HANDLE: "https://tfhub.dev/google/yamnet/1"
  # Sound splitter
  SOUND_SPLITTER_SAMPLE_RATE: "16000"
  SOUND_SPLITTER_CHUNK_SECONDS: "30"
  SOUND_SPLITTER_MAX_CHUNK_BYTES: "200000"
  FFMPEG_BIN: "ffmpeg"
  # Processing workers
  BRAINWAVE_PROC_WORKERS: "2"
  SOUND_PROC_WORKERS: "2"
  # Models
  MODELS_DIR: "./app/models"
  # Kafka 추가 설정
  WAIT_FOR_KAFKA: "1"
  WAIT_TIMEOUT_SEC: "120"
  KAFKA_CLUSTER_ID: "LON0w_3SROKgq1Y-efGUBw"
  # Sound topics
  TOPIC_SOUND_INPUT_RAW: "sound.input.raw"
  TOPIC_SOUND_SPLIT_EPOCHS: "sound.split.epochs"
  TOPIC_SOUND_ANALYZED_EVENT: "sound.analyzed.event"
  TOPIC_SOUND_PERSIST_REQUESTS: "sound.persist.requests"
  # Sound consumer groups
  GROUP_SOUND_SPLITTER: "sound-splitter"
  GROUP_SOUND_ANALYZER: "sound-analyzer"
  GROUP_SOUND_DB_WRITER: "sound-db-writer"
  # Retry
  RETRY_MAX_ATTEMPTS: "3"
  RETRY_BACKOFF_MS: "200"
  # Sound analysis
  SOUND_YAMNET_MODEL_URL: "https://tfhub.dev/google/yamnet/1"
  SOUND_YAMNET_CLASS_MAP_URL: "https://raw.githubusercontent.com/tensorflow/models/master/research/audioset/yamnet/yamnet_class_map.csv"
# =============================================================================
# 서비스 계정 설정
# =============================================================================
serviceAccount:
  create: true
  name: ""
# =============================================================================
# ConfigMap 설정
# =============================================================================
configMap:
  create: true
  name: ""
# =============================================================================
# Secret 설정
# =============================================================================
secrets:
  create: true
  name: ""
  # 민감정보는 Sealed Secrets로 관리합니다. (빈 값 유지)
  JWT_SECRET: ""
  KAFKA_SASL_USERNAME: ""
  KAFKA_SASL_PASSWORD: ""
  # 새로 추가된 JWT 설정
  JWT_ALGORITHM: "HS256"
  JWT_ACCESS_SUBJECT: "AccessToken"
  JWT_REFRESH_SUBJECT: "RefreshToken"
  JWT_TOKEN_HEADER: "Authorization"
  JWT_BEARER_PREFIX: "Bearer"
  JWT_ID_CLAIM: "id"
sealedSecrets:
  enabled: true
  encryptedData:
    # 다음 키에 kubeseal로 암호화한 값을 세팅하세요
    JWT_SECRET: "AgBcOz5Ao1RsuIah4UHqJXH4vSWYp237RgqUaG5hid/nHK2QCUNInwtwlagg/wn+UhocGAwlWcQb0OAINKtl5x1cZjma8QyRlMz2XKn0YOnHSnFxo1ruE0q7f/VVsvcJ2YEtnUrybNUT7zX3y0fwnbuwcvNtu4LkQWIAy+RdtHu14MHhKaskkvSo1D76j3XgzZdswA1merM2u84QFP0WCTq4HvckDzdH4Dpja8oo5jqBi/VcEXLJZJ9eo4ntY5Ff6f6Qf21Mzn+p8IBzeT8fyetCnyORayRh+HaRo1w7qhHOBOCY4HNcxiwWHscnmJRvD5kB8DShFcpAI752U4dnbceCvXNR51LtrMXPlaueDqZm2Znrk19yLgrPmrKqob3T3Z6R1qqd7jFVTq/ScoKKk9+VW1RPg6LiJNzxhsBDCXYX1YQpaaiSLWmNjFg0yw8muWTXOrDgbZKpdP3UaRqKZed8Y6iL2OLlUUaY1nHVZD05ArzfIAkakM5KjXeAzDhcd2jQ44uXcAu6YFN1AsHG2EfwTusAeQ81Q8CqOECMnSXlD7BTKyIm5ExRytVM1RhjjQ3AiWHHoRtOVsZvFdW9HDykZWV1EnhTwGjlUmTKjo9AjRVpp2krfV79Y0cHv3PdmXaGPNfHGB776dBItH2WMSE0u77nnDPEkkjzi4SyuCNFzX3/eidK4Drz6XzxUsKZVOJNtknbrOJArwoVfqG7Nl8xfI/iWnO3SsTDGfPJfIjmjlIOZX6zRVYgnlz6jEC4GElZJIVzHfmyDKLgvmw+DzowYZ2bx/jiPvHt/edVunw5gEODuLxlmi/lXQ=="
    KAFKA_SASL_USERNAME: "AgCVFk2Ou0Y3JhisKx1Vat38GTLsMkQQlKZz+EqXgql2uH5LY6HOI0JMCZJcLdZnv8hu8njRM2zzIvY2jzSYC+J7ydfmo/jLdYarZovnGrWfd8V9sOIHzjd3JEkdZo0bq9FGDTnXWLFDqb98VinG3zwe4g2FlvyT1iZRtF0mQPSbrw0sYIDyVPHsWtmQmxNMTD3r/mYEm6IlIJtPbJ/LKqDPGTOODBAVUl2koE0wgYx4xARuysBAihhoIwke28PjfkcVhTEVaVEW3NG11tlD+o0Isw4mDvgSElQxo7pH7SvtGXcSECxfFKf/Y7IYCQiAmTWXEOispvuhPYGIYJUEZZJ2d2Tr/lT/DDxgBGy4bGwnm0fXGswtl1yCbyCA+4h5dJNqGURptfBIZo6BneNC6whzyg4C4ME0iSuOyn3gGCxEmCOke25aCNk9uqKLIYidoBzrXl43aF26P1vgAGyrsW+16QnW//MZy/JHsBqHXvV6/g6ctSiQ881E60VROTbWeMd3nW+/ZIIQOhghRy9z+cW+3fk9Th/vODBwwvw4NMyvVPT4FpWYJS79HMM6JAYeLs2xS08iTBudQviMVQgvU3FqorKzBYFzF1AMTHzS6R6+ekflh8aYbZKMoI+sCOB2Gu/B6GhjLLfBHIgrzJEj/wvsQgCI3ytWJCk2Und3JDWMe1vmUWWPw28cVcXIzgfd7GGiZWIDFAU6z2nfAQ=="
    KAFKA_SASL_PASSWORD: "AgAPTVp5/3oT42KLtkZMzdaa0+xX0XZKgm+SjZted3oAaQbaMi8rlX3/hCfchM3r/RIyccSeVmoKTMYphJ6mHGu2woJiACI0VCi4uO2OwC++4+1kYijehIbXaQbIhj3VE872ek34EQq/Hcb4yvRzgEMfcsZGSTZprzq2GegIO+hpMvtC3RAD+oGeY6gZ1LJzkOSEUkADhRA+MyQNbB/WVjFlny5wZ8X+WARi2saBc8G2OYqTnNPvViosWAJGsYA/385/lt24hn9Mu85UILPMuqLzXo4f9ssyZme6mJA5Je9qjyGsNVltFuKFWSPUTY7zE75dPJiWjCVnA9GT8erUuHNv+1KgYLxIBb3eLRg/xC1sMHRBFawXKN6WEQY9mlTZO+RvkkjZdjob2wwTuGAD1N1DbG4NTz/kPpvOoVlBm3KBjtb+mNfswBFRe3SleZ6B+5P4qJP0VmgRQKkif1g8qfCaoxXyggHD6yxF8sMMKoEA6lyLTBlSFYbOMbNWrLyNz5Za/WlhUi1WAHPBEiqcM9QWCo0fyXRp2dvzopifSO2p/wjKWlZKvEyuniWyN9q6GduqVHuBl38BCMv41b1sE74rKt4uhKIUaotKTE0SDAkyRSPL3zF+oXs19DbvCzqvtZM9xaxa7+a8rMgqAY27fuhhh7JSjhCHJXKUY/goAT1PclThlEPUeZlGIVxlCKdKxQqMMxeOmTz+Y9Y5IQWRhRI="
# =============================================================================
# Ingress 설정
# =============================================================================
ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
  hosts:
    - host: "mong.live"
      paths:
        - path: /api/analysis
          pathType: Prefix
  tls:
    - secretName: mong-live-tls
      hosts:
        - "mong.live"
# =============================================================================
# 노드 선택자
# =============================================================================
nodeSelector: {}
# =============================================================================
# 톨러레이션
# =============================================================================
tolerations: []
# =============================================================================
# 어피니티
# =============================================================================
affinity: {}
# =============================================================================
# Cloud SQL Proxy 설정
# =============================================================================
cloudSqlProxy:
  enabled: true
  image: gcr.io/cloudsql-docker/gce-proxy:latest
  port: 3306
  instance: mong-develop:asia-northeast3:mong-mysql
# =============================================================================
# Blue-Green 배포 설정
# =============================================================================
blueGreen:
  enabled: true
  activeHash: "active"
  previewHash: "preview"
  autoPromotionEnabled: true
  scaleDownDelaySeconds: 30
# =============================================================================
# 추가 설정
# =============================================================================
podAnnotations: {}
podSecurityContext: {}
securityContext: {}
imagePullSecrets: []
autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 70
lifecycle: {}
