# =============================================================================
# Analysis Service Helm Chart Values
# =============================================================================

# =============================================================================
# 이미지 설정
# =============================================================================
image:
  repository: octacloud/analysis-service
  tag: "deab791c28369464746522f7dfa918fe43974a36-18457071244"
  pullPolicy: IfNotPresent
# =============================================================================
# 서비스 설정
# =============================================================================
service:
  type: ClusterIP
  port: 8080
  targetPort: 8080
# =============================================================================
# 배포 설정
# =============================================================================
replicaCount: 2
# =============================================================================
# 리소스 설정
# =============================================================================
resources:
  limits:
    cpu: 500m
    memory: 1Gi
  requests:
    cpu: 200m
    memory: 512Mi
# =============================================================================
# 헬스 체크 설정
# =============================================================================
livenessProbe:
  httpGet:
    path: /health
    port: 8080
  initialDelaySeconds: 60
  periodSeconds: 30
  failureThreshold: 5
  timeoutSeconds: 10
readinessProbe:
  httpGet:
    path: /health
    port: 8080
  initialDelaySeconds: 60
  periodSeconds: 30
  failureThreshold: 5
  timeoutSeconds: 10
# =============================================================================
# 환경 변수 설정
# =============================================================================
env:
  REDIS_HOST: "10.226.34.155"
  REDIS_PORT: "6379"
  PYTHONUNBUFFERED: "1"
  MONGODB_URI: "mongodb://mongodb.microservices-dev.svc.cluster.local:27017/mong"
  DATABASE_URL: "mysql+pymysql://monguser:mongpassword123@localhost:3306/mong-analysis?charset=utf8mb4"
  DB_USER: "monguser"
  DB_PASSWORD: "mongpassword123"
  DB_HOST: "127.0.0.1"
  DB_PORT: "3306"
  DB_NAME: "mong-analysis"
  KAFKA_ENABLED: "true"
  KAFKA_BROKERS: "pkc-gq2xn.asia-northeast3.gcp.confluent.cloud:9092"
  KAFKA_SECURITY_PROTOCOL: "SASL_SSL"
  KAFKA_SASL_MECHANISM: "PLAIN"
  KAFKA_SESSION_TIMEOUT_MS: "45000"
  TOPIC_BRAINWAVE_INPUT_RAW: "brainwave.input.raw"
  TOPIC_BRAINWAVE_SPLIT_EPOCHS: "brainwave.split.epochs"
  TOPIC_BRAINWAVE_ANALYZED_EPOCH: "brainwave.analyzed.epoch"
  TOPIC_BRAINWAVE_PERSIST_REQUESTS: "brainwave.persist.requests"
  TOPIC_DLQ: "brainwave.dlq"
  GROUP_BRAINWAVE_SPLITTER: "brainwave-splitter"
  GROUP_BRAINWAVE_ANALYZER: "brainwave-analyzer"
  GROUP_BRAINWAVE_AGGREGATOR: "brainwave-aggregator"
  GROUP_BRAINWAVE_DB_WRITER: "brainwave-db-writer"
# =============================================================================
# 서비스 계정 설정
# =============================================================================
serviceAccount:
  create: true
  name: ""
# =============================================================================
# ConfigMap 설정
# =============================================================================
configMap:
  create: true
  name: ""
# =============================================================================
# Secret 설정
# =============================================================================
secrets:
  create: true
  name: ""
  JWT_SECRET: "KItFWMZokpiSj6ABi42XJpNWbBqUJ4UT3mhLrXk//IjI2TgQy2Bk+2KrCk4cQDl8oFsSYH9Gr++Lqr2w6CYJnQ=="
  KAFKA_SASL_USERNAME: "AGQDVMNB6DVPXFX7"
  KAFKA_SASL_PASSWORD: "cfltBaumbQnzwuPIRS3E8S1MNrfqrsb9LXzDvUBPBrP0YQRUTfBqdD2nOKmzUXFw"
# =============================================================================
# Ingress 설정
# =============================================================================
ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
  hosts:
    - host: "mong.live"
      paths:
        - path: /api/analysis
          pathType: Prefix
  tls:
    - secretName: mong-live-tls
      hosts:
        - "mong.live"
# =============================================================================
# 노드 선택자
# =============================================================================
nodeSelector: {}
# =============================================================================
# 톨러레이션
# =============================================================================
tolerations: []
# =============================================================================
# 어피니티
# =============================================================================
affinity: {}
# =============================================================================
# Cloud SQL Proxy 설정
# =============================================================================
cloudSqlProxy:
  enabled: true
  image: gcr.io/cloudsql-docker/gce-proxy:latest
  port: 3306
  instance: mong-develop:asia-northeast3:mong-mysql
# =============================================================================
# 추가 설정
# =============================================================================
podAnnotations: {}
podSecurityContext: {}
securityContext: {}
imagePullSecrets: []
autoscaling:
  enabled: false
lifecycle: {}
