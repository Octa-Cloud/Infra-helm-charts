# =============================================================================
# Analysis Service Helm Chart Values
# =============================================================================

# =============================================================================
# 이미지 설정
# =============================================================================
image:
  repository: octacloud/analysis-service
  tag: "e9c51d2656e7a91381a63205f31447a2dc364df3-18524744265"
  pullPolicy: IfNotPresent
# =============================================================================
# 서비스 설정
# =============================================================================
service:
  type: ClusterIP
  port: 8080
  targetPort: 8080
# =============================================================================
# 배포 설정
# =============================================================================
replicaCount: 3
# =============================================================================
# 리소스 설정
# =============================================================================
resources:
  limits:
    cpu: 500m
    memory: 1Gi
  requests:
    cpu: 200m
    memory: 512Mi
# =============================================================================
# 헬스 체크 설정
# =============================================================================
livenessProbe:
  httpGet:
    path: /health
    port: 8080
  initialDelaySeconds: 60
  periodSeconds: 30
  failureThreshold: 5
  timeoutSeconds: 10
readinessProbe:
  httpGet:
    path: /health
    port: 8080
  initialDelaySeconds: 60
  periodSeconds: 30
  failureThreshold: 5
  timeoutSeconds: 10
# =============================================================================
# 환경 변수 설정
# =============================================================================
env:
  # 기존 환경변수들 (유지)
  REDIS_HOST: "10.226.34.155"
  REDIS_PORT: "6379"
  PYTHONUNBUFFERED: "1"
  MONGODB_URI: "mongodb://mongodb.microservices-dev.svc.cluster.local:27017/mong"
  DATABASE_URL: "mysql+pymysql://monguser:mongpassword123@localhost:3306/mong-analysis?charset=utf8mb4"
  DB_USER: "monguser"
  DB_PASSWORD: "mongpassword123"
  DB_HOST: "127.0.0.1"
  DB_PORT: "3306"
  DB_NAME: "mong-analysis"
  KAFKA_ENABLED: "true"
  KAFKA_BROKERS: "pkc-gq2xn.asia-northeast3.gcp.confluent.cloud:9092"
  KAFKA_SECURITY_PROTOCOL: "SASL_SSL"
  KAFKA_SASL_MECHANISM: "PLAIN"
  KAFKA_SESSION_TIMEOUT_MS: "45000"
  KAFKA_PROTOBUF_ENABLED: "true"
  TOPIC_BRAINWAVE_INPUT_RAW: "brainwave.input.raw"
  TOPIC_BRAINWAVE_SPLIT_EPOCHS: "brainwave.split.epochs"
  TOPIC_BRAINWAVE_ANALYZED_EPOCH: "brainwave.analyzed.epoch"
  TOPIC_BRAINWAVE_PERSIST_REQUESTS: "brainwave.persist.requests"
  TOPIC_DLQ: "brainwave.dlq"
  GROUP_BRAINWAVE_SPLITTER: "brainwave-splitter"
  GROUP_BRAINWAVE_ANALYZER: "brainwave-analyzer"
  GROUP_BRAINWAVE_AGGREGATOR: "brainwave-aggregator"
  GROUP_BRAINWAVE_DB_WRITER: "brainwave-db-writer"
  # 새로 추가된 환경변수들 (음성 분석 기능)
  # Logging
  LOG_LEVEL: "INFO"
  LOG_PROFILE: "text"
  # Sound worker defaults
  YAMNET_SAMPLE_RATE: "16000"
  YAMNET_CONFIDENCE: "0.87"
  YAMNET_MODEL_HANDLE: "https://tfhub.dev/google/yamnet/1"
  # Sound splitter
  SOUND_SPLITTER_SAMPLE_RATE: "16000"
  SOUND_SPLITTER_CHUNK_SECONDS: "30"
  SOUND_SPLITTER_MAX_CHUNK_BYTES: "200000"
  FFMPEG_BIN: "ffmpeg"
  # Processing workers
  BRAINWAVE_PROC_WORKERS: "2"
  SOUND_PROC_WORKERS: "2"
  # Models
  MODELS_DIR: "./app/models"
  # Kafka 추가 설정
  WAIT_FOR_KAFKA: "1"
  WAIT_TIMEOUT_SEC: "120"
  KAFKA_CLUSTER_ID: "LON0w_3SROKgq1Y-efGUBw"
  # Sound topics
  TOPIC_SOUND_INPUT_RAW: "sound.input.raw"
  TOPIC_SOUND_SPLIT_EPOCHS: "sound.split.epochs"
  TOPIC_SOUND_ANALYZED_EVENT: "sound.analyzed.event"
  TOPIC_SOUND_PERSIST_REQUESTS: "sound.persist.requests"
  # Sound consumer groups
  GROUP_SOUND_SPLITTER: "sound-splitter"
  GROUP_SOUND_ANALYZER: "sound-analyzer"
  GROUP_SOUND_DB_WRITER: "sound-db-writer"
  # Retry
  RETRY_MAX_ATTEMPTS: "3"
  RETRY_BACKOFF_MS: "200"
  # Sound analysis
  SOUND_YAMNET_MODEL_URL: "https://tfhub.dev/google/yamnet/1"
  SOUND_YAMNET_CLASS_MAP_URL: "https://raw.githubusercontent.com/tensorflow/models/master/research/audioset/yamnet/yamnet_class_map.csv"
# =============================================================================
# 서비스 계정 설정
# =============================================================================
serviceAccount:
  create: true
  name: ""
# =============================================================================
# ConfigMap 설정
# =============================================================================
configMap:
  create: true
  name: ""
# =============================================================================
# Secret 설정
# =============================================================================
secrets:
  create: true
  name: ""
  # 민감정보는 Sealed Secrets로 관리합니다. (빈 값 유지)
  JWT_SECRET: ""
  KAFKA_SASL_USERNAME: ""
  KAFKA_SASL_PASSWORD: ""
  # 새로 추가된 JWT 설정
  JWT_ALGORITHM: "HS256"
  JWT_ACCESS_SUBJECT: "AccessToken"
  JWT_REFRESH_SUBJECT: "RefreshToken"
  JWT_TOKEN_HEADER: "Authorization"
  JWT_BEARER_PREFIX: "Bearer"
  JWT_ID_CLAIM: "id"
sealedSecrets:
  enabled: true
  encryptedData:
    # 다음 키에 kubeseal로 암호화한 값을 세팅하세요
    JWT_SECRET: "AgBAU7v/1ds4zRPCpOvABh5T28eMFe1iqR3S+Rm/UTiiFPkt5hASmTP7zfSWjcaHxPQgDDapNeSeETPrLUIJje02d5pOAiSUYJ7faDQBIdBLgAnQxFEq/usDMJ24Lx2un6AdJR5wMputv9+XkT7+OgSbNkxhShGgbe9be0lsMhrDeFSbkr6z7BlQkLxwEJ+OsbWvMReA0GWQUvFhciZ+ekub0rk+rQQL9bpqxiL6/KP60LOxLcw9c6uVhwAseEZn1kAmad1kuD4FeVHa8gbMxXlTUYWPz1vlexrxCk8STbSeVY+h+bkdSUnsXWE4MFHmHPAu6C4eLN9JIEByBCs2Y5OmFzloW4jRs3350/NPWiW2na9P1O10EGDDxYHOvFijnCZIzecAlmZyHiX3wl2Un/rqT89Rj1EMrMnNfURlv8+2OxSwd5I2W1kOnAnfTMRgN+RQHj+9vVIEG0K3yjR6xNV8a0yL2SHPhHmWqREZGOwJKFI++3kjPImnimFo7KGXcvUNw5pEADR+dyHKiAmPFuxo5UeW9MUXz0JtNbNWaPn1kScq/mXPC7J3Wp/vf6YsuMqUtpQvEZ8MQ0dYtsa0BTZ5N9tL1eyLgNrczRI7j0L5TbUjKAnLhTW4Quv2mTt4t0bqiuuvF4BOxlVoT1T17Lqtj4XNYmPCupBsmgK99IZ+TOn+BfJIb5Rg0ISpU167BVOO58V8lu5w2j1gniGtyij/+xgYGKApVvePM85JumABraM9PdRCbWc0w0RFZzsFOl6bWsY6QzeHpHH03wUrSgOYmmnMg+noCmm1Cluc8+uYBc0K8inHre2jvQ=="
    KAFKA_SASL_USERNAME: "AgAKey87pWVf5svGaWeeO+vlVNA6hMC7p01oJJxtVAo+adDw1X6hfOUg8U+htbhPfRn6cHLAt8yEh4Dykbc8v72kIRH8GnHfXBeqldWcqVsusRl50a8mkhfANpQCvwFDrKDbuUmeYBvp09P0YKvmbvkQeYlTW6SCGF1k2ZcajyENP1n/9In/PAvIbqVJqXPvWOJa6u3H54Z1mdSODEuxxk5puM3F3c6I//d8g3jJLROCZ/tAFXj3b9imghzf9leBRofkTbQCniuSEWLuwmVAWwv19X21lqHXhCHpx9e5m928ILFVHA/0X2Tvb3G5I+TajfkbYTchQ1/8MQE1xEuACpRrE7SD+/OH7JKXzpLVMUF8R/nTvp0i11MbjXKd9qFP94kOAvGujR3Y0tQE5joY0u4IgTKBrtxlQuQsDaVu96a5biJSLQ+kgfdRzVHhIwdee+At0Hv1ERzF+zFdgPKxd+kBeQz79ikLk0DZuxtQNPd3y6Kbg1Y3DmhStPqhf5YkqhzHnzV34oD+wfv9p4mdM0wER8YskktbI6xDxWr5mcJ6pDd5pDV6aqrV2oiCVZi5z+9l5l/4yHmcbIBsKzxAaMwiKWIolNB91jxO8Gdwoo8YR5h8KfJtkgtTIRCCU0xXqeSeefXr5syzBTvQYuJeaOCtGTjt9ZeRnhMbGG0WFwfmBIfvXACquPFUKvO36Z/ShoKgiZeuTDXkBqNw/w=="
    KAFKA_SASL_PASSWORD: "AgDE1Q48BpKBaQ2pM16uev4SCuh8tGJdxpSHXdeWnN+Ik0R3QYDL72ojgo8dCWBiCecPnoEp06n31KQ5IVGxLC0rM4vU6JvWLpZyt605MPBsCN1cteOWQhPsEHyyy/EPUQXy4gbOfLtj791wqG4lNLW1oFbMBaLlCbBlLDfUZFby4fuDDy31LY2S58PSoDaiL9NnoVDfayEoJ9ztDFERG3z0jpUiQBmjb3AUg2TwCc7qDUKoOCiYBLlrgayykGKjbROq3W1vdKu34Jx4p88lUfr3clm1+w7VsITxAKAiYgDyJ/YoKUaA9NZiOECWePwswk7Vnk2ee0gdtwAVk34RUBicKm/GGT6QiU/F6JV8BSo+zmcnEDBUK1RCD7nArBtzMKuYPkIQ0G2diiaxMP4FQoX77Gm06HryVxb/JemggXC5GY+vFieJiAH51oQSBbA5IfLE+Fd0QWb5oIu9dkqhlQwEcWmXFDir1HKDyYiGceFjKEQIfrzS5+Y0sC+AgvLVmHgKQawpHai1zk4A5M+htDSYjmZXRmcygVa633fIgCZB8AScj2XTB+Dp/nBqkOyJo89VsKIK0BPQNxxvFYHurvczERWUyrPQSNxhmb/5EBrnstiLR9YXfFnO2jY84cGSKApZt6B9OmzNsBEFqd2GouQdF/Fz8csWu/lAE9vRXNcTJ8qlf7ZxklXvH6EH/wASN4TLSgr3AYq9pYpNcLgtK+E="
# =============================================================================
# Ingress 설정
# =============================================================================
ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
  hosts:
    - host: "mong.live"
      paths:
        - path: /api/analysis
          pathType: Prefix
  tls:
    - secretName: mong-live-tls
      hosts:
        - "mong.live"
# =============================================================================
# 노드 선택자
# =============================================================================
nodeSelector: {}
# =============================================================================
# 톨러레이션
# =============================================================================
tolerations: []
# =============================================================================
# 어피니티
# =============================================================================
affinity: {}
# =============================================================================
# Cloud SQL Proxy 설정
# =============================================================================
cloudSqlProxy:
  enabled: true
  image: gcr.io/cloudsql-docker/gce-proxy:latest
  port: 3306
  instance: mong-develop:asia-northeast3:mong-mysql
# =============================================================================
# Blue-Green 배포 설정
# =============================================================================
blueGreen:
  enabled: true
  activeHash: "active"
  previewHash: "preview"
  autoPromotionEnabled: true
  scaleDownDelaySeconds: 30
# =============================================================================
# 추가 설정
# =============================================================================
podAnnotations: {}
podSecurityContext: {}
securityContext: {}
imagePullSecrets: []
autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 70
lifecycle: {}
