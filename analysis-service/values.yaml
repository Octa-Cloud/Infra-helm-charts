# =============================================================================
# Analysis Service Helm Chart Values (Spring Boot)
# =============================================================================

# =============================================================================
# 이미지 설정
# =============================================================================
image:
  repository: octacloud/analysis-service
  tag: "f0f5cc2543a07a64938ab92d343466d8d7cc11a4-18628723222"
  pullPolicy: IfNotPresent
# =============================================================================
# 서비스 설정
# =============================================================================
service:
  type: ClusterIP
  port: 8080
  targetPort: 8080
# =============================================================================
# 배포 설정
# =============================================================================
replicaCount: 2
# =============================================================================
# 리소스 설정
# =============================================================================
resources:
  limits:
    cpu: 500m
    memory: 1Gi
  requests:
    cpu: 100m
    memory: 256Mi
# =============================================================================
# 헬스 체크 설정
# =============================================================================
livenessProbe:
  httpGet:
    path: /actuator/health/liveness
    port: 8080
  initialDelaySeconds: 120
  periodSeconds: 30
  failureThreshold: 5
  timeoutSeconds: 10
readinessProbe:
  httpGet:
    path: /actuator/health/readiness
    port: 8080
  initialDelaySeconds: 60
  periodSeconds: 10
  failureThreshold: 3
  timeoutSeconds: 5
# =============================================================================
# 환경 변수 설정
# =============================================================================
env:
  # Spring Boot 기본 설정
  SPRING_PROFILES_ACTIVE: "prod"
  SERVER_PORT: "8080"
  # 데이터베이스 설정
  RDB_USERNAME: "monguser"
  RDB_PASSWORD: "mongpassword123"
  RDB_URL: "jdbc:mysql://34.22.107.76:3306/mong-user?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC"
  # Redis 설정
  SPRING_REDIS_HOST: "10.226.34.155"
  SPRING_REDIS_PORT: "6379"
  # JWT 설정
  JWT_KEY: ""
  JWT_ACCESS_SUBJECT: "AccessToken"
  JWT_TOKEN_HEADER: "Authorization"
  JWT_BEARER: "Bearer"
  JWT_ID: "id"
  # Kafka 설정
  KAFKA_ENABLED: "true"
  KAFKA_BROKERS: "pkc-gq2xn.asia-northeast3.gcp.confluent.cloud:9092"
  KAFKA_SECURITY_PROTOCOL: "SASL_SSL"
  KAFKA_SASL_MECHANISM: "PLAIN"
  KAFKA_SASL_USERNAME: ""
  KAFKA_SASL_PASSWORD: ""
  # 파일 업로드 설정
  SPRING_SERVLET_MULTIPART_MAX_FILE_SIZE: "50MB"
  SPRING_SERVLET_MULTIPART_MAX_REQUEST_SIZE: "50MB"
  # 로깅 설정
  LOGGING_LEVEL_ROOT: "INFO"
  LOGGING_LEVEL_COM_PROJECT_ANALYSIS: "DEBUG"
# =============================================================================
# 서비스 계정 설정
# =============================================================================
serviceAccount:
  create: true
  name: ""
# =============================================================================
# ConfigMap 설정
# =============================================================================
configMap:
  create: true
  name: ""
# =============================================================================
# Secret 설정
# =============================================================================
secrets:
  create: true
  name: ""
  # 민감정보는 Sealed Secrets로 관리합니다. (빈 값 유지)
  JWT_KEY: ""
  RDB_PASSWORD: ""
  KAFKA_SASL_USERNAME: ""
  KAFKA_SASL_PASSWORD: ""
sealedSecrets:
  enabled: true
  encryptedData:
    # 다음 키에 kubeseal로 암호화한 값을 세팅하세요 (현재 클러스터의 공개키 사용)
    JWT_KEY: "AgAq72oWYZkhto0iq6jDGExFVmZl0XQ4bG9Ew7nxLegvs3yd9L5Ubt6LnjbKH7cUJBqV1uEsJzoSdZKkZBpc87b+lYvRN6zN8xUi2lBjb61YcZLr53p4DhphOndzs1olVYeSUwDLzxjWA/qOkQ4ai7lieYL7fvDdhU263ZGiSrh95i8pC9aCJqaQseZVOv3OdY5L7SA/5qKsD1OYZgElH4Wnok6nDidKWMh6FBN8I/w9enDufmFF6qkwAq65ZiAtyYaPw1U+cmqR6AuVp+exGTGuz+1Ifey+3Oppa/x/5ojTAbJAufdxKgGpI7G6SB02J7h7V//D4yd+qWUDyC5RVNdYlk3K38tUdcw3G2ZItNHMlFQkiaRbts73FMDK/IYbnH/uQjVab7gDrAz4LMuCGlHCmUN1Do7hb/WWvhGn2AbTWQ+6RLt2CgjX1YhLhzPOP22G4bW17oG/tWy7GKjfuolQZmjTx2Fp765R8lPAo46uQTQZ0l9vqP2s3yQhV7yHmsVJd3IM7EEq9tTmpKEtRgRQWsCGrJd0/gRcxnYZ7n7l+u3FrBKpPshdxN4rJ63m4F0+qizzce/MN7SgMPy1uPYoYRDIo8B42nsIlBUYJAGjNlOn0sJvt/117q3+m1xS/ZD35hsrSu1gS+F6UwNPf5T/xhh6nASV9AeueP5h/tsDTtlT5C+iy7thTNgA3xSYjpLTDStsOMgsyVR+/AVJjrYi3NxBEzAf8p0JUug+Nuh4rjH4GDpGx6Yex1D4B/Z73jBQKenKZueHqd8Nf2SG5+y9NrxcDb5PS4TgO+tLMD0/s7gwiOX9fVpP"
    RDB_PASSWORD: "AgDaJtNsEA2u+iihn6lCAbo4hoVtgC/DoBYfMjZPSlp5JcK559V8UH+h5rf7jg3DsxWFS9qebbnZs85gnZz/2zImNJTBXrLRzyEx4u7sUkSt/pjcRK034aCBGrrjTXUYjs1Sc8PucY8l1Fbxu/+8Bv78vEVelF7B2zHgrVlSgr9z08dgGj+tQ2uKqBymT9uJO6SgWSNodTeuXpNV0T3iZNIeOBUfs08RyzIwiTMKQfuIlb1F/w3jf5UryI4FrbRhsxC48ZA/P6oEmZBxSaj5z/nAyt2QgpV9eGszfkCxsDBNNA8WEbb8YCnVVTZwiHR/jS2Nffc1cemyEC3myeJD5vXCZhhUxykFeNfztGOylSHVx+3WJ8vs1aZV2IIkcwpYddT/RxIe5YyrZeaRQK2dctocihyj4n2bwRzx/16lcukgjYVgfNazOqQusCT63fuSDv6H1lxuvsEilDxj+hoHmLUiEF26TJBZ25tpwq3yJviTt4TjiRsDSrlpN70i6t74/4MyOI+o+03ntUINtvL1BswjY+7xUaISSAfICii/vb84iGOCk23HxnphiL49mrGT3djK1W7ttr3CjbQ1WZ8fFZCvXQa02EZIzNFyS2cGsS7hj8DWwPkmjA0yzvjAG79iQoaUc/H+4ORwgNGI8H9lkGRESM7WvaO7JRruRp6IPvnE79mSqHBRmlPKyaus4KcXyjZEUChpFa47FoDJW9Rt6yRW8a+Lw6aD8F5YuJ9uGHMTMkTPvpt7WxwfMpwtTWlRY/fez2djapX4O6EzS++uLM00"
    KAFKA_SASL_USERNAME: "AgBpHbPvU9/hLLhWjfS5BusZB+HMM2pfGanWpIwPDdFqT3/AdkJ8nUt7F1rwyyjPIkq8VjnFG5gEeV3Y0EuD4z28Brz18nLcgZNPUEbK5/EhkYbFrhEjChM25aeXsE2tX3yZtzO1MTRbZmb2JJL+nwnQw1RexkNlbC71dL10am1Udl8gSjxpw60VFg6G0d9J6Js+o7hzEevr2PXLtmlSsdwrjfTeqlz67cW8vMMtv7h7tuhxRPjAMVgruKTpea9NR8uQLgO5LNMpQFbGwEVHvVhtuenV8ccqJzhdU9G1ja7vNAztTa7tdEK6a+Ew70RIGDvDUKhk/YkrJ4rW0RHzW8u/GDgzF+m+ScNOcvcHAH+Z81SAHJnoNPAY7ESpA06AqvNH2vRLmflJAlgZt2kI0O5jjmDx8SIxhE1oG9Gqm69ZecTlzo53co1g9Uf3sn/JLkrHTqQaGPYYeFxplpHfQtVha6WLkGpo/qDAlsrzhGqIBCxb3dwGHrs2cID+VGlRcXXHAtGJGwnr5sock/g528YLTknAM1I+wPGY32H4LN6Pxsdekfy62EK5XJXU/ETvDg387qOzbaZ/KgRucWbqmRJmdsniLhFgOxRJdnecz7wAp+1IW8wo+A+SCeQ5d3/JpxGAFUbURaxL9NJxciJr1nSXTdNoNlT8bUfDv+GVkPWz74ln8GCE1IMAi69uepYuIKq/TraDcUL19l9kyJuK1kKm"
    KAFKA_SASL_PASSWORD: "AgAkuKohA5bZPjOLf+Dju/uFBlUbmeYeZhzYObN1uTqTtmnp8xvuY4GVTVdTiAy4RIRW54dootb4mqY8uGtqtTr5aXq1fTYV/RWg5Zk6jNXKIsIrIf84K0StvgJSWTYAFrW2jBQkMBiNwY3/R9+hxMl/sDaTd+GP3dOTG608yyZz6X5IsU8T2eRia2tLXMrwHLhGvF7DumQsSeDDi5tE/Pno73lBnHYlUWOnQwTEe/GbBpCLoW1S0Aak4/2cPdnhSuuoeyJ2olZSU8Z/yFYH5ikGKE9NPF+Dokv/VNQ6MDQyRMhqKsJ9PSyWqAYPSEdWmBKI9FKWgF/QudvOPFWF5VVppcdBRUMD/7wwdfAuXp+XHKHIPd6xERpdm1SKgvIh1Vm7+6ZuP22ngZ8VoSz1sM94BbG4bYpTnhOIDaZ5BhwlKam3Q3KHumcSNyIzJzHQeRRYoGjLVT4r5A5oBXFRfOOtwPcbpBM88HXKCehcxYIvIxH7tmhNRgjf8xPyecwhu/iPsMrT4aAt5bB/ozOIB/jAPZBxRJvfDKKoB/ez0TsrwNUtuVoKEf1GELsnTAgfsvXG52S/zF6z9RGKK64RhWvHWXQpbobPPosSdqSLDxPqQ2nW/2Oghuopfc1P5VJPmS2fHVjW4nA2j7gn7DgtYoiNSTmAG46D2VSoeQ6EGLxJuQH2O99mkzTMo2bQ4wcccsKQKwLcrflWCfpUb+TdwpEGIDF/Cz6Ufmb1I/dzVINqsPjr+x2g1TTow1r1QQkIwY4I33+isV1IMnFsMQ4zWJ1s"
# =============================================================================
# Ingress 설정
# =============================================================================
ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt"
    nginx.ingress.kubernetes.io/auth-url: "http://auth-service.microservices-dev.svc.cluster.local:8080/api/auth/internal"
    nginx.ingress.kubernetes.io/auth-method: "POST"
    nginx.ingress.kubernetes.io/auth-request-headers: "Authorization, X-User-Id"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "http://localhost:5173, https://www.mong.live, http://www.mong.live"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS, PATCH, HEAD"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Authorization, Content-Type, X-Requested-With, Accept, Origin, Access-Control-Request-Method, Access-Control-Request-Headers, X-User-Id, Cache-Control, Pragma"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-max-age: "3600"
    nginx.ingress.kubernetes.io/auth-snippet: |
      # OPTIONS 요청은 CORS preflight이므로 인증 제외하고 CORS 헤더 추가
      if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '$http_origin' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH, HEAD' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With, Accept, Origin, Access-Control-Request-Method, Access-Control-Request-Headers, X-User-Id, Cache-Control, Pragma' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Max-Age' '3600' always;
        add_header 'Content-Length' 0;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        return 204;
      }
  hosts:
    - host: "api.mong.live"
      paths:
        - path: /api/analysis
          pathType: Prefix
  tls:
    - secretName: api-mong-live-tls
      hosts:
        - "api.mong.live"
# =============================================================================
# 노드 선택자
# =============================================================================
nodeSelector: {}
# =============================================================================
# 톨러레이션
# =============================================================================
tolerations: []
# =============================================================================
# 어피니티
# =============================================================================
affinity: {}
# =============================================================================
# Cloud SQL Proxy 설정
# =============================================================================
cloudSqlProxy:
  enabled: true
  image: gcr.io/cloudsql-docker/gce-proxy:latest
  port: 3306
  instance: mong-develop:asia-northeast3:mong-mysql
# =============================================================================
# 추가 설정
# =============================================================================
podAnnotations: {}
podSecurityContext: {}
securityContext: {}
imagePullSecrets: []
# =============================================================================
# HPA (Horizontal Pod Autoscaler) 설정
# =============================================================================
autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
# =============================================================================
# 라이프사이클 훅
# =============================================================================
lifecycle: {}
