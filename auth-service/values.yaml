# =============================================================================
# Auth Service Helm Chart Values
# =============================================================================

# =============================================================================
# 이미지 설정
# =============================================================================
image:
  repository: octacloud/auth-service
  tag: "64ee01d5f870985a412f65ac74f519ae73e6cbeb-18442244187"
  pullPolicy: IfNotPresent
# =============================================================================
# 서비스 설정
# =============================================================================
service:
  type: ClusterIP
  port: 8080
  targetPort: 8080
# =============================================================================
# 배포 설정
# =============================================================================
replicaCount: 1
# =============================================================================
# 리소스 설정
# =============================================================================
resources:
  limits:
    cpu: 500m
    memory: 1Gi
  requests:
    cpu: 200m
    memory: 512Mi
# =============================================================================
# 헬스 체크 설정
# =============================================================================
livenessProbe:
  httpGet:
    path: /actuator/health/liveness
    port: 8080
  initialDelaySeconds: 300
  periodSeconds: 30
  failureThreshold: 5
  timeoutSeconds: 10
readinessProbe:
  httpGet:
    path: /actuator/health/readiness
    port: 8080
  initialDelaySeconds: 300
  periodSeconds: 30
  failureThreshold: 5
  timeoutSeconds: 10
# =============================================================================
# 환경 변수 설정
# =============================================================================
env:
  SPRING_DATA_REDIS_HOST: "10.226.34.155"
  SPRING_DATA_REDIS_PORT: "6379"
  USER_SERVICE_URL: "http://user-service.microservices-dev.svc.cluster.local:8080"
# =============================================================================
# 서비스 계정 설정
# =============================================================================
serviceAccount:
  create: true
  name: ""
# =============================================================================
# ConfigMap 설정
# =============================================================================
configMap:
  create: true
  name: ""
# =============================================================================
# Secret 설정
# =============================================================================
secrets:
  create: true
  name: ""
  # JWT_KEY는 민감한 정보이므로 Secret으로 관리
  JWT_KEY: ""
sealedSecrets:
  enabled: true
  encryptedData:
    JWT_KEY: "AgB/bPKLhctcDv8h7zAnEC8Hw17UV6ew3vN2sKlF6Yy49A1Ib9cQwBjCo/VC2zuh0ssEEqL/MYi67kGSrVN8iRnGDmOGDRwXJce9RFj942PIoxQEadUtHbd0HAmn4FF7ITQ5dbzy633jtZA4v8QHjTUdBntNQqq9Rh2hnY0RaLyQQ5NpZ2vaSdffK+mm9uk1tCrcyZd5NqUGo3LYtS+Nt7YTiDyT/t0s4hi2aSQ3NVWTBO7tmNr3Z/l7X0udVGVpDD9Ds6mRwSKkuqdAVUo97UKwTjj8hlepqOJ/t9MIXDO5xqom2rU/jM2WhOiUJrlM1NM75aQ/Y5+bbl6H/bPVZ5k0srkGYp26E7nKPMotxeGsW0vvOj9tSNAKpFvY4E7cMc4t14qjhmQCOaKeUyirLxig4xw9zhCYGVGnV9XYPKlnAQduYIffi0fdmFw3k5qI3V+zRoNzhpmrCNd0B/MTC1hAxiwvas7pYDnEpxrIAEWN1bXfKwiYURXLnUUEZClBAlzoALAyNwzpvOSfskFkSdPeDpT9gj4ghvPPgqXAhw65TuqrKmj7ieBsFbx7QsWDWVWjShDc7vA02jRYnRDPmBi52DMSuJXg0zTh9GLWAJMleU1t474uNLFWLX0IzhXCVVD5r029vYKH6J0MGiBc047hN2O+JA2n+3FlUr56J+cZZ3BqXXDvGzXZ7J60r+BLEfT2aU/fDMfVx1aCIy83gZxI4Zg/gcxIyxN5hdYF2zycPwuPb0NgQFp84s08aQQUWWATa8RkKX1xUedjQqqEar2RoouSLSePkd9Xk+4ePs3kaUlYf2BHlqXTRQ=="
# =============================================================================
# Ingress 설정
# =============================================================================
ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt"
  hosts:
    - host: "mong.live"
      paths:
        - path: /api/auth
          pathType: Prefix
  tls:
    - secretName: mong-live-tls
      hosts:
        - "mong.live"
# =============================================================================
# 노드 선택자
# =============================================================================
nodeSelector: {}
# =============================================================================
# 톨러레이션
# =============================================================================
tolerations: []
# =============================================================================
# 어피니티
# =============================================================================
affinity: {}
# =============================================================================
# 배포 전략 설정
# =============================================================================
blueGreen:
  enabled: false  # Rolling Update 사용
# =============================================================================
# 추가 설정
# =============================================================================
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/path: "/actuator/prometheus"
  prometheus.io/port: "8080"
podSecurityContext: {}
securityContext: {}
imagePullSecrets: []
autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 70
lifecycle: {}
# =============================================================================
# Metrics 설정
# =============================================================================
metrics:
  enabled: true
