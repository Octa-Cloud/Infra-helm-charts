# =============================================================================
# Auth Service Helm Chart Values
# =============================================================================

# =============================================================================
# 이미지 설정
# =============================================================================
image:
  repository: octacloud/auth-service
  tag: "826412c62370a4fd7eec147de519b28889ad4188-18614530251"
  pullPolicy: IfNotPresent
# =============================================================================
# 서비스 설정
# =============================================================================
service:
  type: ClusterIP
  port: 8080
  targetPort: 8080
# =============================================================================
# 배포 설정
# =============================================================================
replicaCount: 1
# =============================================================================
# 리소스 설정
# =============================================================================
resources:
  limits:
    cpu: 500m
    memory: 1Gi
  requests:
    cpu: 100m
    memory: 512Mi
# =============================================================================
# 헬스 체크 설정
# =============================================================================
livenessProbe:
  httpGet:
    path: /actuator/health/liveness
    port: 8080
  initialDelaySeconds: 300
  periodSeconds: 30
  failureThreshold: 5
  timeoutSeconds: 10
readinessProbe:
  httpGet:
    path: /actuator/health/readiness
    port: 8080
  initialDelaySeconds: 300
  periodSeconds: 30
  failureThreshold: 5
  timeoutSeconds: 10
# =============================================================================
# 환경 변수 설정
# =============================================================================
env:
  SPRING_DATA_REDIS_HOST: "10.226.34.155"
  SPRING_DATA_REDIS_PORT: "6379"
  USER_SERVICE_URL: "http://user-service.microservices-dev.svc.cluster.local:8080"
# =============================================================================
# 서비스 계정 설정
# =============================================================================
serviceAccount:
  create: true
  name: ""
# =============================================================================
# ConfigMap 설정
# =============================================================================
configMap:
  create: true
  name: ""
# =============================================================================
# Secret 설정
# =============================================================================
secrets:
  create: true
  name: ""
  # JWT_KEY는 민감한 정보이므로 Secret으로 관리
  JWT_KEY: ""
sealedSecrets:
  enabled: true
  encryptedData:
    JWT_KEY: "AgBU3MdSq45cGMdzdPsS4lNNb99/pMcZ1E/zH5SnYx4ETUnojiso8dXD98ylFn1KXHbvB90k7QirpTDZSSRlUk9KmatgV9TaBREF3BdOQrY5HfNCwXDCcEkjiUduXHo3VueumV4EXM2B4yWLAzHkGIRbdrXw7450CgonFfgNrNtESxxwmS5abSR/b6A9UMWVsBMfdOwvJtv9x8r8cKD6rKhFJb6+lv3Mzd4+yiGsPRDCOUl9ZTiQ0pX/x09llmu9xCkY7mwUuPgz8kIDKSFI7oH4mhIpgQ5u1t6rOiAmwO85JrCPXXghXTYZmoeX4xTB7c5Km4H0hGMVPF6CUlSsp+bNU89qxgW4XeONMrvTcWe6431eDth/jxAWoBkcUUBPNbYeoV202VTeZ6X2iwLKjfArJwlkJpThBGIAWO9Ts5JJ/gmPbWjbaExlTQzMmMy8HbgAi5Zd2ykw5JpzwA6Nanl7GpmrjldA1KTzaFWoK1Mr1+TtfDJoJnuAFh+w/LShceWo7T7TU7xpsqA0ZzNWYwRmGP+VJ2CcSWgwwIwI7rP25rgPGHaW/X4AygTz6aZHXDiSPdHvmlHy7o26hhY0nKVz5qQW/ufDLn3Kxd2Sath95Gq7wWeBspSDUp9etBEGoumqk/13vlK3RNW+9Uom1C0dNlC1ljcQ19i8WNLft1+mtKyKbISLYOXaWoVKE1UXdEpALdPPN85+4azyyrE5xy+tX5OBqazGwp8DxxZYd9BcZTUanAee1AHquSDG/MlTxH86NMNPgACrZs93LTsqf+EYmW3Q2gfWLpFgP4FpNRZraCgm8Kqxxj3c"
# =============================================================================
# Ingress 설정
# =============================================================================
ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt"
  hosts:
    - host: "api.mong.live"
      paths:
        - path: /api/auth
          pathType: Prefix
  tls:
    - secretName: api-mong-live-tls
      hosts:
        - "api.mong.live"
# =============================================================================
# 노드 선택자
# =============================================================================
nodeSelector: {}
# =============================================================================
# 톨러레이션
# =============================================================================
tolerations: []
# =============================================================================
# 어피니티
# =============================================================================
affinity: {}
# =============================================================================
# 배포 전략 설정
# =============================================================================
blueGreen:
  enabled: false # Rolling Update 사용
# =============================================================================
# 추가 설정
# =============================================================================
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/path: "/actuator/prometheus"
  prometheus.io/port: "8080"
podSecurityContext: {}
securityContext: {}
imagePullSecrets: []
autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 70
lifecycle: {}
# =============================================================================
# Metrics 설정
# =============================================================================
metrics:
  enabled: true
