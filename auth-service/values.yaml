# =============================================================================
# Auth Service Helm Chart Values
# =============================================================================

# =============================================================================
# 이미지 설정
# =============================================================================
image:
  repository: octacloud/auth-service
  tag: "64ee01d5f870985a412f65ac74f519ae73e6cbeb-18442244187"
  pullPolicy: IfNotPresent
# =============================================================================
# 서비스 설정
# =============================================================================
service:
  type: ClusterIP
  port: 8080
  targetPort: 8080
# =============================================================================
# 배포 설정
# =============================================================================
replicaCount: 1
# =============================================================================
# 리소스 설정
# =============================================================================
resources:
  limits:
    cpu: 500m
    memory: 1Gi
  requests:
    cpu: 200m
    memory: 512Mi
# =============================================================================
# 헬스 체크 설정
# =============================================================================
livenessProbe:
  httpGet:
    path: /actuator/health/liveness
    port: 8080
  initialDelaySeconds: 300
  periodSeconds: 30
  failureThreshold: 5
  timeoutSeconds: 10
readinessProbe:
  httpGet:
    path: /actuator/health/readiness
    port: 8080
  initialDelaySeconds: 300
  periodSeconds: 30
  failureThreshold: 5
  timeoutSeconds: 10
# =============================================================================
# 환경 변수 설정
# =============================================================================
env:
  SPRING_DATA_REDIS_HOST: "10.226.34.155"
  SPRING_DATA_REDIS_PORT: "6379"
  USER_SERVICE_URL: "http://user-service.microservices-dev.svc.cluster.local:8080"
# =============================================================================
# 서비스 계정 설정
# =============================================================================
serviceAccount:
  create: true
  name: ""
# =============================================================================
# ConfigMap 설정
# =============================================================================
configMap:
  create: true
  name: ""
# =============================================================================
# Secret 설정
# =============================================================================
secrets:
  create: true
  name: ""
  # JWT_KEY는 민감한 정보이므로 Secret으로 관리
  JWT_KEY: ""
sealedSecrets:
  enabled: true
  encryptedData:
    JWT_KEY: "AgBR3oIc9G5CtPghKQPNlhPGPuSP+1evYEHQ3KMctLMPUwvgQRMEZgXOh89cePwOguFwTOIwP3uKyP00LuyZ89j8YJPwBJ3Geyb4KTx7Qd04dB4Wpbs0hFidfe9C1JnlxqYyRLdRMXf5fCn2PCBs3tJQwKypljgFgO+fkqUuH9WLcN87Ez4azV866wC9HvHj9OY8uNTV8nbvSwid9POtIaloiSFa21LoyjwyMo9tbhQfvPuMWGLhvLLqKtUBI2DlwUrRINdsOLHPdPrHSs4mohGPOE9i6aBf/vkvd3YGFHab0qi3jJjQNt95aGqdRlNJ/6pLq4DW6BO/AJDl18GnZ1+HrXougT260brZDnChi11KJaTtsxWmQ6YEjBHTFfG+0ymhJHbDK6Z1n4W1wmauavBCzRpWjbps/dpJyZ6cPgmIcGn8WOPqWzLFFdnzVrMwQpgdMwVd6qkmTt5Hk6Xtl0oRsDXkGTZQ+NksbCHvNA+T585cE/pt1ITIvCiIJuC9F0jCM2zubQa6e906ieA73LaNfEZtT/5zuBaUBFPDLrPGUQ6XCt3YmJLRNbEfQmdRwcVPbSXCSAYkayV8kduqnxATSB6/DKn8kY80w6kMsq2iABWGkVK8Lofug2atYWrtcG807Dnb4IpBukZl3p18L6DF6sy0HJtcqWPd/goEX46q9BlxaEzP//dcB2Tg2QkpyynwWxlanZc2qzBJa2yXnMp6r8u2Uav+tMQAklX9l8sJOEPCpKLG97MvxdlITV1b5h1voDtNcv6KxryMGxJq+r5Px5fYJxx9Gjn5sH9BNULpOZ8FSJALD1PiJQ=="
# =============================================================================
# Ingress 설정
# =============================================================================
ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt"
  hosts:
    - host: "mong.live"
      paths:
        - path: /api/auth
          pathType: Prefix
  tls:
    - secretName: mong-live-tls
      hosts:
        - "mong.live"
# =============================================================================
# 노드 선택자
# =============================================================================
nodeSelector: {}
# =============================================================================
# 톨러레이션
# =============================================================================
tolerations: []
# =============================================================================
# 어피니티
# =============================================================================
affinity: {}
# =============================================================================
# 배포 전략 설정
# =============================================================================
blueGreen:
  enabled: false  # Rolling Update 사용
# =============================================================================
# 추가 설정
# =============================================================================
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/path: "/actuator/prometheus"
  prometheus.io/port: "8080"
podSecurityContext: {}
securityContext: {}
imagePullSecrets: []
autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 70
lifecycle: {}
# =============================================================================
# Metrics 설정
# =============================================================================
metrics:
  enabled: true
